// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum PlatformType {
  YOUTUBE
  TWITCH
  TIKTOK
  INSTAGRAM
  FACEBOOK
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String    @unique
  emailVerified    DateTime?
  image            String?
  streams          Stream[]
  platformAccounts PlatformAccount[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model PlatformAccount {
  id                 String       @id @default(cuid())
  userId             String
  user               User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  platform           PlatformType
  platformUserId     String
  platformUsername   String?
  
  accessToken        String?
  refreshToken       String?
  accessTokenExpiry  DateTime?
  
  isActive           Boolean      @default(true)
  permissions        Json?
  
  connectedAt        DateTime     @default(now())
  lastSyncedAt       DateTime?

  @@unique([userId, platform])
  @@index([platform, platformUserId])
}

model Stream {
  id            String   @id @default(cuid())
  title         String
  description   String?
  isLive        Boolean  @default(false)
  streamKey     String   @unique
  
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  
  platformStreams PlatformStream[]
  
  startedAt     DateTime @default(now())
  endedAt       DateTime?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model PlatformStream {
  id              String   @id @default(cuid())
  streamId        String
  stream          Stream   @relation(fields: [streamId], references: [id])
  
  platform        PlatformType
  platformStreamId String
  
  platformSpecificMetadata Json?
  
  createdAt       DateTime @default(now())
}